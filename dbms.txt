# SQL Queries

SELECT Statement

SELECT column1, column2 FROM table_name WHERE condition;

JOIN Two Tables

SELECT a.column1, b.column2
FROM table1 a
JOIN table2 b ON a.common_column = b.common_column;

WHERE Clause

SELECT * FROM table_name WHERE column = 'value';

ORDER BY Clause

SELECT * FROM table_name ORDER BY column ASC|DESC;

INSERT Statement

INSERT INTO table_name (column1, column2) VALUES (value1, value2);

UPDATE Statement

UPDATE table_name SET column1 = value1 WHERE condition;

DELETE Statement

DELETE FROM table_name WHERE condition;

# PL/SQL Basic Block

DECLARE
  -- Variables and Cursors
BEGIN
  -- SQL Statements
EXCEPTION
  -- Error Handling
END;

# Cursor Template

DECLARE
  CURSOR cursor_name IS SELECT column1, column2 FROM table_name;
  var1 table_name.column1%TYPE;
  var2 table_name.column2%TYPE;
BEGIN
  OPEN cursor_name;
  LOOP
    FETCH cursor_name INTO var1, var2;
    EXIT WHEN cursor_name%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(var1 || ' ' || var2);
  END LOOP;
  CLOSE cursor_name;
END;

# Procedure Template

CREATE OR REPLACE PROCEDURE procedure_name(param1 IN datatype)
AS
BEGIN
  -- Logic
END;

Example Call:

BEGIN
  procedure_name(parameter_value);
END;

# Trigger Template

CREATE OR REPLACE TRIGGER trigger_name
AFTER INSERT OR UPDATE ON table_name
FOR EACH ROW
BEGIN
  -- Use :NEW.column_name or :OLD.column_name
END;

# Important Notes

Use :NEW.column_name for new inserted/updated values.

Use :OLD.column_name for old existing values.

Always OPEN, FETCH, and CLOSE cursors properly.

Procedures are called manually, triggers fire automatically.

# Quick Tip

JOIN = Combining tables.

Cursor = Processing multiple rows one-by-one.

Procedure = Reusable block.

Trigger = Auto action on event.


------------------------------JDBC--------------------------------------------

package practice;

import java.sql.*;


import java.sql.*;

public class school {
    private static final String URL = "jdbc:mysql://localhost:3306/school";
    private static final String USER = "root";  // Your MySQL username
    private static final String PASSWORD = "root";  // Your MySQL password

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    // CREATE: Insert a new student
    public static void createStudent(String name, int age, String grade) {
        String query = "INSERT INTO students (name, age, grade) VALUES (?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, name);
            stmt.setInt(2, age);
            stmt.setString(3, grade);
            int rowsAffected = stmt.executeUpdate();
            System.out.println("Student added. Rows affected: " + rowsAffected);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // READ: Retrieve all students
    public static void readStudents() {
        String query = "SELECT * FROM students";
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                int age = rs.getInt("age");
                String grade = rs.getString("grade");
                System.out.println("ID: " + id + ", Name: " + name + ", Age: " + age + ", Grade: " + grade);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // UPDATE: Update a student's details
    public static void updateStudent(int id, String name, int age, String grade) {
        String query = "UPDATE students SET name = ?, age = ?, grade = ? WHERE id = ?";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, name);
            stmt.setInt(2, age);
            stmt.setString(3, grade);
            stmt.setInt(4, id);
            int rowsAffected = stmt.executeUpdate();
            System.out.println("Student updated. Rows affected: " + rowsAffected);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // DELETE: Delete a student by ID
    public static void deleteStudent(int id) {
        String query = "DELETE FROM students WHERE id = ?";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, id);
            int rowsAffected = stmt.executeUpdate();
            System.out.println("Student deleted. Rows affected: " + rowsAffected);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Create new students
        createStudent("John Doe", 18, "A");
        createStudent("Jane Smith", 19, "B");

        // Read all students
        System.out.println("All Students:");
        readStudents();

        // Update a student (ID = 1)
        updateStudent(1, "John Doe", 20, "A+");

        // Read all students after update
        System.out.println("\nUpdated Students:");
        readStudents();

        // Delete a student (ID = 2)
        deleteStudent(2);

        // Read all students after deletion
        System.out.println("\nStudents After Deletion:");
        readStudents();
    }
}


--------------------------------------------------------------------------------------------------------


MongoDB Basics ðŸš€
# Connect to Database
shell
Copy
Edit
mongo
# Create or Switch Database
javascript
Copy
Edit
use database_name
# Show Databases
javascript
Copy
Edit
show dbs
# Show Collections
javascript
Copy
Edit
show collections
MongoDB CRUD Operations
# Insert Documents
javascript
Copy
Edit
db.collection_name.insertOne({ key1: value1, key2: value2 })

db.collection_name.insertMany([
  { key1: value1 },
  { key1: value2 }
])
# Read Documents
javascript
Copy
Edit
db.collection_name.find()              // Fetch all
db.collection_name.find({ key: value }) // Fetch with condition
# Update Documents
javascript
Copy
Edit
db.collection_name.updateOne(
  { key: value },
  { $set: { key_to_update: new_value } }
)

db.collection_name.updateMany(
  { key: value },
  { $set: { key_to_update: new_value } }
)
# Delete Documents
javascript
Copy
Edit
db.collection_name.deleteOne({ key: value })
db.collection_name.deleteMany({ key: value })
MongoDB Extra Commands
# Create Collection
javascript
Copy
Edit
db.createCollection('collection_name')
# Drop Collection
javascript
Copy
Edit
db.collection_name.drop()
# Drop Database
javascript
Copy
Edit
db.dropDatabase()
MongoDB Query Operators
# Comparison Operators
javascript
Copy
Edit
$eq   // equal
$gt   // greater than
$gte  // greater than or equal
$lt   // less than
$lte  // less than or equal
$ne   // not equal
$in   // in array
$nin  // not in array
Example:
javascript
Copy
Edit
db.collection_name.find({ price: { $gt: 500 } })
# Logical Operators
javascript
Copy
Edit
$and
$or
$not
$nor
Example:
javascript
Copy
Edit
db.collection_name.find({
  $or: [ { category: 'Electronics' }, { price: { $lt: 1000 } } ]
})
Aggregation Basics
# Basic Aggregation Example
javascript
Copy
Edit
db.collection_name.aggregate([
  { $match: { key: value } },
  { $group: { _id: "$key", total: { $sum: "$quantity" } } }
])
Indexing
# Create Index
javascript
Copy
Edit
db.collection_name.createIndex({ key: 1 })   // 1 for ascending, -1 for descending
# View Indexes
javascript
Copy
Edit
db.collection_name.getIndexes()
Important Tips ðŸŒŸ
Documents = JSON-like structure ({}).

Collections = Similar to SQL tables.

Database â‰ˆ group of collections.

No need to define schema in advance (schema-less).

Primary Key = _id field automatically created.

Query results are CURSORS (use .pretty() for clean view).